// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Squabble.Data;

namespace Squabble.Migrations
{
    [DbContext(typeof(SquabbleContext))]
    partial class SquabbleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AzureChatThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("ChannelId");

                    b.HasIndex("ServerID");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            ChannelId = 1,
                            AzureChatThreadId = "19:nzF3dny0zetNYvXBzLS02XA37IZrxVs7rrxqBzTCePY1@thread.v2",
                            ChannelName = "Test Channel",
                            ServerID = 1
                        },
                        new
                        {
                            ChannelId = 2,
                            AzureChatThreadId = "19:pKMdnHy719c4TKjy4yT6XcJT44de74zY48-7pcBLTdM1@thread.v2",
                            ChannelName = "1-2"
                        });
                });

            modelBuilder.Entity("Squabble.Models.ChannelMember", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelMembers");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            ChannelId = 2
                        },
                        new
                        {
                            UserID = 2,
                            ChannelId = 2
                        });
                });

            modelBuilder.Entity("Squabble.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Squabble.Models.Entities.User", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSso")
                        .HasColumnType("bit");

                    b.Property<string>("MicrosoftSsoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA4LWQxMzgtNGJmZS05NTNhMGQwMDkyNzAiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc0MDg2MzAiLCJleHAiOjE2Mzc0OTUwMzAsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzQwODYzMH0.cj5gu6mDllNcB-yDDy69DKLHLQsTR_8mjiwSMeObi5newn3OxBOtQywxRgVzUGrwmVGsShw-BAfbEszWd9qfSNmZEJWu7Tz9G9v2WEUXrilpWGnZLcGGYg2tkMTGVpT3ckj-yj8t5xGIKXD_aI0xQaMdX0T9_345LqlQLymr3T4qSmhioK8_hcAoHGgJX6_ijJG--FNi893_nLkiAJWtKy1E-T1KL-vHSWcwX5cKbwlm0kcC2Wd5EkUHAcTngHmdIehDhfDrnRo3lwmmLC6ulaI_5zE1haSbJjUKa0jJVoDjSWPxwba8rwCkFpEAMHEfXUCzi0ZO7t9mwqFn7vHxhg",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd08-d138-4bfe-953a0d009270",
                            Email = "test1@test.com",
                            FirstName = "Test",
                            IsSso = false,
                            MiddleName = "Ing",
                            Surname = "Dummy",
                            UserName = "Dragonborn"
                        },
                        new
                        {
                            AccountId = 2,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA5LTcyZWItNGJmZS05NTNhMGQwMDkyN2EiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc0MDg2MzEiLCJleHAiOjE2Mzc0OTUwMzEsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzQwODYzMX0.EANz8Sv5cpFVHZRxIFa996tETXGZpBkG2LcqMoH59-YKsTHIfWUwhbwwgHLVx9Lvuw_LL6wT0-UXkeULVT7aKdnvtjUGmCNn8o2whufFrzRc9S4BVBqcjMHLlhIahZiL78cWMOMYvl0Lsjl2U4KNMCDBrhhqprTfV07rT1zGMfrWAtJhpUmp26n0bsd_aQOKOKKH5RfrRDIlKsadPFbbEAjrFM7Hou7aBpMUkncd9I6oPexqu6W2rFrGB2kQUNNEpDgGBwUWqX95UzNLY3N7lwkPE7i1dRYfPecscJzv8BeQ3ApmOF4NXNvKtB7fAkwAXj3Rp19Gk_uJFH4aPcY3qQ",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd09-72eb-4bfe-953a0d00927a",
                            Email = "test2@test.com",
                            FirstName = "Flim",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Flam",
                            UserName = "Hayzeus"
                        },
                        new
                        {
                            AccountId = 3,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA5LWJkMmQtNGJmZS05NTNhMGQwMDkyN2MiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc0MDg2MzIiLCJleHAiOjE2Mzc0OTUwMzIsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzQwODYzMn0.KMCjTdvdEreFEwZ0qoGAL_cch4NpEdhLHHxYWur9EFgLcyKLNbkv3R5QEWQu7V3Qn5x8KPm-C_Tu00UgNU6VTOGLQOfLiZD8CgIhj1KYLGzj-c8BhT-FTzpOx3rwmPI_O4R5jtAXOOxowBYV6z3S6d12BfALOhI82odsQC6c8kVKGNHOTA0xMn10ApydkVxn9Z3VnQ1PmsIROSnKHlSxfAlcpbvDMtnOHxE9wBzCdoLC2b4aSEJSgIDU5DnTXLb6HPQZa-ZjheTcooI2czYiSHZJnkKwbJ2SYJ1Sh6kNXAcm8-k3dHndxv30g6CbldqMkZlltvpjtGdh_qSUlkOJKg",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd09-bd2d-4bfe-953a0d00927c",
                            Email = "test3@test.com",
                            FirstName = "Bob",
                            IsSso = false,
                            MiddleName = "The",
                            Surname = "Builder",
                            UserName = "Handyman"
                        },
                        new
                        {
                            AccountId = 4,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDBhLTA5ZjItNGJmZS05NTNhMGQwMDkyODAiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc0MDg2MzMiLCJleHAiOjE2Mzc0OTUwMzMsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzQwODYzM30.k5JEO0her-bqFHEXonVVIx3oIBDv0XV-6d3gBL8pMqxIHLNTbsXGKVzFED9DX3NFl176av_hXztUZIPjr8yFrkJE7zDY2rsnVqcvmjun1oKzKbQe5ZKZPmdpwczVvJJCnyrIRUZ8xHNA2Bzv6QVSKbkYjWUuzivIZ7cp-w4GODNt9q9xyvIX0XPaQVdDH3UXrOHMKfRYA7K79qmK5giKV1T1SgCXHBmOztzxw8xkNOolIxaW_8oMV2jUgXacWOKFR-Bro7EXsXRFL3X7I6qCOcuaNlf7cXBxQ5p7h66_lfv4QeeGIV0xsMrxoh8v0h847SrP8_GSylcAcKuwsm6-qA",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd0a-09f2-4bfe-953a0d009280",
                            Email = "bikinibottom1@test.com",
                            FirstName = "Spongebob",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Squarepants",
                            UserName = "Spongebob"
                        },
                        new
                        {
                            AccountId = 5,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDBhLTQ2YmEtNGJmZS05NTNhMGQwMDkyODIiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc0MDg2MzMiLCJleHAiOjE2Mzc0OTUwMzMsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzQwODYzM30.E4JMIAT8Y0twP3DiN3aLaDEno8BFqTkP38ZmvAojIelVyXSkz9C6Qf9C9OgyeieMcPOFbfFCqNVWbLtJZbOwzD-FNM07GiQ4y96XZvbrywf5Bz9xvUy_bz6UsdX84xEneTbALRE68bh96oxb42t7dfE4TwfImXY8sAb2MW0uRtCmV2Uak0iDmI2nBklASnjIRVQfU_wjIHcxtjMg9dEWcv7r1C9FrGrRKY50pLA_-A2m63cS_rbENOTP_0vRjd-GioXMBH4wASnhhr2L94W46NcWSuCti7P-b3biNk-QzYtI7DCsski72Dzd6EutxT70IWVMEZ0mo9RY3P1ZW5bM-g",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd0a-46ba-4bfe-953a0d009282",
                            Email = "bikinibottom2@test.com",
                            FirstName = "Squidward",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Tentacles",
                            UserName = "Squidward"
                        });
                });

            modelBuilder.Entity("Squabble.Models.FriendRequest", b =>
                {
                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("FriendRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SenderID", "ReceiverID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Squabble.Models.Friendship", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FriendID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FriendID");

                    b.HasIndex("FriendID");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            FriendID = 2
                        },
                        new
                        {
                            UserID = 2,
                            FriendID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.KanbanItem", b =>
                {
                    b.Property<int>("KanbanItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("KanbanItemID");

                    b.HasIndex("UserID");

                    b.ToTable("KanbanItems");
                });

            modelBuilder.Entity("Squabble.Models.Login", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAnswerOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityAnswerTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityQuestionOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityQuestionTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Email", "UserName");

                    b.HasIndex("AccountId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Email = "bikinibottom1@test.com",
                            UserName = "Spongebob",
                            AccountId = 4,
                            PasswordHash = "eshQ+gqiTpkc3gFdKuA31pU18VLYkZGxWrV6KOtHX6xvnuLZAK4Cw4ScEet9UsZp",
                            SecurityAnswerOne = "2EeMilgOZL+o/Lj4HN/JGidPX7NnexHt2HqAGBEQzrd8tJx5RooYcT+7+Oc8xhIB",
                            SecurityAnswerTwo = "6RGkTpRcig/ldSRFfqIc7xOH+zgYSx5aHenuXiRKyyaXT6WxzHhYW7mZo3UJFuTe",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "bikinibottom2@test.com",
                            UserName = "Squidward",
                            AccountId = 5,
                            PasswordHash = "ldXuQ+xZg/xpfBQcYg0jKDw5lqakye12f6hgk1qrZb4PwN8/i1mIS2F72//ducLd",
                            SecurityAnswerOne = "34u+IXuUbFIfJEQ0VlAtB6TrWyZnjZMjbLQsTtKLjvVpGcIxFun20JYAOptyCMYD",
                            SecurityAnswerTwo = "Rxwan39CQ/fiN/AcHw3UxPO1NOEKa7snhPbl9OVwmPjSCNXUfr0AEdOi2Dk/N8As",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test1@test.com",
                            UserName = "Dragonborn",
                            AccountId = 1,
                            PasswordHash = "H+6k8J5Fo7d2BXba6VWm4rje5wuJ8Zk5PpfaWPZvH3RE4ptnfV45r9gbaX681uZg",
                            SecurityAnswerOne = "HxkBxqAm2K2HBlrKejIYzjIrCLR2qaE4sq0fPY7IX4gqtvoHRxE6bWSkf0n1u7pi",
                            SecurityAnswerTwo = "HQZMoBZ+y272ejgjvXseUIvbHJDqI3OCnXwMIvQg+E3VTbbSlek6X6JauXXvHPdS",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test2@test.com",
                            UserName = "Hayzeus",
                            AccountId = 2,
                            PasswordHash = "ldmqLFrWzdlKNUarpoPt3EdFhaVYrSOAFvZMV0298XwRkfls9g+YHxUmMcYwmTny",
                            SecurityAnswerOne = "Qko7Ag6dcBfPx4UW76vjO4Jycm4nl3ajFWPwW+KXOMfXNx6Mr3Padd8UI3QTKMfY",
                            SecurityAnswerTwo = "rOB4AHPd0D3A1t2RMAkwWd6BiS5woXenrnCrCW53TASe2NcfJ1gUmJB3cXS5hLvZ",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test3@test.com",
                            UserName = "Handyman",
                            AccountId = 3,
                            PasswordHash = "33WMjxiTCSgL2NwWx8wUwABsNtpy/E0xFQvKG5itqUbOnwPoZtQBhlco2T21306b",
                            SecurityAnswerOne = "Z/KdgRd52EHntvgneWQAgvmPfOJnZHLxBouZlgrfSBzYTlH6cCtCDKlqsh7bXayV",
                            SecurityAnswerTwo = "1aywehyrqTN0184kCj92PCOHypgnw6nZwEyC/Th9yQccKOBSBkyBGloGOWaaBaKK",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        });
                });

            modelBuilder.Entity("Squabble.Models.Server", b =>
                {
                    b.Property<int>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerID");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            ServerID = 1,
                            ServerName = "Test server :)"
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerAdmin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ServerID");

                    b.HasIndex("ServerID");

                    b.ToTable("ServerAdmins");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerMember", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ServerID");

                    b.HasIndex("ServerID");

                    b.ToTable("ServerMembers");

                    b.HasData(
                        new
                        {
                            UserID = 3,
                            ServerID = 1
                        },
                        new
                        {
                            UserID = 4,
                            ServerID = 1
                        },
                        new
                        {
                            UserID = 5,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerOwner", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ServerID");

                    b.HasIndex("ServerID")
                        .IsUnique();

                    b.ToTable("ServerOwners");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerID");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Squabble.Models.ChannelMember", b =>
                {
                    b.HasOne("Squabble.Models.Channel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Entities.Post", b =>
                {
                    b.HasOne("Squabble.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.FriendRequest", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Squabble.Models.Friendship", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.KanbanItem", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Login", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Squabble.Models.ServerAdmin", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Admins")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.ServerMember", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.ServerOwner", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithOne("ServerOwner")
                        .HasForeignKey("Squabble.Models.ServerOwner", "ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Squabble.Models.Entities.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");
                });

            modelBuilder.Entity("Squabble.Models.Server", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Channels");

                    b.Navigation("Members");

                    b.Navigation("ServerOwner");
                });
#pragma warning restore 612, 618
        }
    }
}
